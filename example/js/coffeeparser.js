/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"coffee":3,"S":4,"EOF":5,"Block":6,"ExprBlock":7,"ForBlock":8,"WhileBlock":9,"IfBlock":10,"ElseBlock":11,"ObjBlock":12,"ArrayBlock":13,"Const":14,"VARIABLE":15,"=":16,"FUNCTION":17,"+":18,"-":19,"*":20,"/":21,"POW":22,"return":23,"break":24,"continue":25,"NUMBER":26,"STRING":27,"bool":28,"undefined":29,"null":30,"true":31,"false":32,"LEFT_BRACKET":33,"MultiElement":34,"RIGHT_BRACKET":35,"ElementEnd":36,",":37,"LEFT_BRACE":38,"ObjExpr":39,"RIGHT_BRACE":40,"KeyValueEnd":41,"KeyValues":42,"AttrKey":43,"COLON":44,"AttrValue":45,"KeyValue":46,"IfCondition":47,"Blocks":48,"if":49,"(":50,")":51,"else":52,"ForCondition":53,"WhileCondition":54,"while":55,"for":56,"of":57,"in":58,"VARIABLES":59,"->":60,"VARIABLES_":61,"VARIABLE_":62,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"VARIABLE",16:"=",18:"+",19:"-",20:"*",21:"/",22:"POW",23:"return",24:"break",25:"continue",26:"NUMBER",27:"STRING",29:"undefined",30:"null",31:"true",32:"false",33:"LEFT_BRACKET",35:"RIGHT_BRACKET",37:",",38:"LEFT_BRACE",40:"RIGHT_BRACE",44:"COLON",49:"if",50:"(",51:")",52:"else",55:"while",56:"for",57:"of",58:"in",60:"->"},
productions_: [0,[3,2],[4,2],[4,0],[6,1],[6,1],[6,1],[6,1],[6,2],[7,1],[7,1],[7,1],[7,3],[7,1],[7,3],[7,1],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,1],[7,1],[14,1],[14,1],[14,1],[14,1],[14,1],[28,1],[28,1],[13,2],[13,2],[34,3],[34,2],[36,1],[12,3],[12,2],[12,1],[39,2],[41,3],[42,2],[42,0],[46,2],[43,1],[43,1],[43,1],[45,1],[10,4],[47,4],[47,2],[11,4],[48,1],[48,2],[8,4],[9,4],[54,4],[54,2],[53,6],[53,6],[53,4],[53,4],[53,4],[53,4],[17,7],[59,2],[59,0],[61,2],[61,0],[62,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = $$[$0-1] + $$[$0]; 
break;
case 3: this.$ = ''; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0]; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = $$[$0-1] + $$[$0]; 
break;
case 9: this.$ = $$[$0] + ';<br />'; 
break;
case 10: this.$ = $$[$0] + ';\n'; 
break;
case 11: this.$ = $$[$0] + ';\n'; 
break;
case 12: this.$ = $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0]; 
break;
case 15: this.$ = '(' + $$[$0] + ')'; 
break;
case 16: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 17: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 18: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 19: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 20: this.$ = 'Math.pow(' + $$[$0-2] + ', ' + $$[$0] + ')'; 
break;
case 21: this.$ = $$[$0-1] + $$[$0]; 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = $$[$0]; 
break;
case 25: this.$ = $$[$0]; 
break;
case 26: this.$ = $$[$0]; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = $$[$0]; 
break;
case 29: this.$ = 'true'; 
break;
case 30: this.$ = 'false';	
break;
case 31: this.$ = $$[$0-1] + $$[$0]; 
break;
case 32: this.$ = '[]' 
break;
case 33: this.$ = $$[$0-2] + $$[$0-1] + ' ' + $$[$0]; 
break;
case 34: this.$ = $$[$0-1] + ']' 
break;
case 35: this.$ = $$[$0]; 
break;
case 36: this.$ = '{' + $$[$0-1] + '}'; 
break;
case 37: this.$ = '{}'; 
break;
case 38: this.$ = '{' + $$[$0] + '}'; 
break;
case 39: this.$ = $$[$0-1] + $$[$0]; 
break;
case 40: this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 41: this.$ = $$[$0-1] + $$[$0]; 
break;
case 42: this.$ = ''; 
break;
case 43: this.$ = $$[$0-1] + $$[$0]; 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = $$[$0]; 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = $$[$0]; 
break;
case 48: this.$ = $$[$0-3] + ' {' + '\n' + $$[$0-1] + '}'; 
break;
case 49: this.$ = 'if' + '(' + $$[$0-1] + ')'; 
break;
case 50: this.$ = 'if' + '(' + $$[$0] + ')';
break;
case 51: this.$ = $$[$0-3] + ' {' + '\n' + $$[$0-2] + '}'; 
break;
case 52: this.$ = $$[$0]; 
break;
case 53: this.$ = $$[$0-1] + $$[$0]; 
break;
case 54: this.$ = $$[$0-3] + $$[$0-1] + '}'; 
break;
case 55: this.$ = $$[$0-3] + ' {' + '\n' + $$[$0-1] + '}'; 
break;
case 56: this.$ = 'while' + '(' + $$[$0-1] + ')'; 
break;
case 57: this.$ = 'while' + '(' + $$[$0] + ')';
break;
case 58: 
			this.$ = '_ref = ' + $$[$0] + '\n' + 
		         'for (' + $$[$0-4] + ' in _ref) {' + '\n' +
		         '    ' + $$[$0-2] + ' = _ref[' + $$[$0-4] + ']' + '\n';
		
break;
case 59: 
			this.$ = 'for (' + $$[$0-4] + ' in ' + $$[$0] + ') {' + '\n' +
		         '    ' + $$[$0-2] + ' = ' + $$[$0] + '[' + $$[$0-4] + ']' + '\n';
		
break;
case 60: this.$ = 'for (' + $$[$0-2]  + ' in ' + $$[$0] + ') {' + '\n'; 
break;
case 61: this.$ = 'for (' + $$[$0-2]  + ' in ' + $$[$0] + ') {' + '\n'; 
break;
case 62:
			this.$ = '_ref = ' + $$[$0] + '\n' +
			     'for (_' + $$[$0-2] + ' = 0, _len = _ref.length; _' + 
				 $$[$0-2] + ' < _len; _' + $$[$0-2] + '++) {' + '\n' +
				 '    ' + $$[$0-2] + ' = _ref[_' + $$[$0-2] + ']_' + '\n';
		
break;
case 63:
			this.$ = 'for (_' + $$[$0-2] + ' = 0, _len = ' + $$[$0] + '.length; _' + 
				 $$[$0-2] + ' < _len; _' + $$[$0-2] + '++) {' + '\n' +
				 '    ' + $$[$0-2] + ' = ' + $$[$0] + '[_' + $$[$0-2] + ']_' + '\n';
		
break;
case 64: this.$ = 'function(' + $$[$0-5] + ') {' + '\n' + $$[$0-1] + '}'; 
break;
case 65: this.$ = $$[$0-1] + $$[$0]; 
break;
case 66: this.$ = ''; 
break;
case 67: this.$ = $$[$0-1] + $$[$0]; 
break;
case 68: this.$ = ''; 
break;
case 69: this.$ = $$[$0-2] + $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,47:18,49:[1,30],50:[1,27],53:16,54:17,55:[1,29],56:[1,28]},{1:[3]},{5:[1,35]},{4:36,5:[2,3],6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,47:18,49:[1,30],50:[1,27],53:16,54:17,55:[1,29],56:[1,28]},{5:[2,4],15:[2,4],18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],29:[2,4],30:[2,4],31:[2,4],32:[2,4],33:[2,4],38:[2,4],40:[2,4],49:[2,4],50:[2,4],55:[2,4],56:[2,4]},{5:[2,5],15:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],29:[2,5],30:[2,5],31:[2,5],32:[2,5],33:[2,5],38:[2,5],40:[2,5],49:[2,5],50:[2,5],55:[2,5],56:[2,5]},{5:[2,6],15:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],29:[2,6],30:[2,6],31:[2,6],32:[2,6],33:[2,6],38:[2,6],40:[2,6],49:[2,6],50:[2,6],55:[2,6],56:[2,6]},{5:[2,7],11:42,15:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],29:[2,7],30:[2,7],31:[2,7],32:[2,7],33:[2,7],38:[2,7],40:[2,7],49:[2,7],50:[2,7],52:[1,43],55:[2,7],56:[2,7]},{5:[2,9],15:[2,9],18:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],29:[2,9],30:[2,9],31:[2,9],32:[2,9],33:[2,9],35:[2,9],37:[2,9],38:[2,9],40:[2,9],49:[2,9],50:[2,9],51:[2,9],55:[2,9],56:[2,9]},{5:[2,10],15:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],29:[2,10],30:[2,10],31:[2,10],32:[2,10],33:[2,10],35:[2,10],37:[2,10],38:[2,10],40:[2,10],49:[2,10],50:[2,10],51:[2,10],55:[2,10],56:[2,10]},{5:[2,11],15:[2,11],18:[2,11],19:[2,11],20:[2,11],21:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],35:[2,11],37:[2,11],38:[2,11],40:[2,11],49:[2,11],50:[2,11],51:[2,11],55:[2,11],56:[2,11]},{5:[2,13],15:[2,13],16:[1,44],18:[2,13],19:[2,13],20:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],35:[2,13],37:[2,13],38:[2,13],40:[2,13],44:[2,13],49:[2,13],50:[2,13],51:[2,13],55:[2,13],56:[2,13]},{5:[2,15],15:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],29:[2,15],30:[2,15],31:[2,15],32:[2,15],33:[2,15],35:[2,15],37:[2,15],38:[2,15],40:[2,15],49:[2,15],50:[2,15],51:[2,15],55:[2,15],56:[2,15]},{7:45,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27]},{5:[2,22],15:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],35:[2,22],37:[2,22],38:[2,22],40:[2,22],49:[2,22],50:[2,22],51:[2,22],55:[2,22],56:[2,22]},{5:[2,23],15:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],35:[2,23],37:[2,23],38:[2,23],40:[2,23],49:[2,23],50:[2,23],51:[2,23],55:[2,23],56:[2,23]},{38:[1,46]},{38:[1,47]},{38:[1,48]},{15:[1,51],26:[1,52],27:[1,53],39:49,40:[1,50],41:31,43:34},{5:[2,38],15:[2,38],18:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[2,38],29:[2,38],30:[2,38],31:[2,38],32:[2,38],33:[2,38],35:[2,38],37:[2,38],38:[2,38],40:[2,38],49:[2,38],50:[2,38],51:[2,38],55:[2,38],56:[2,38]},{7:57,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],34:54,35:[1,55],36:56,38:[1,19],39:20,41:31,43:34,50:[1,27]},{5:[2,24],15:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],35:[2,24],37:[2,24],38:[2,24],40:[2,24],44:[2,24],49:[2,24],50:[2,24],51:[2,24],55:[2,24],56:[2,24]},{5:[2,25],15:[2,25],18:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],35:[2,25],37:[2,25],38:[2,25],40:[2,25],44:[2,25],49:[2,25],50:[2,25],51:[2,25],55:[2,25],56:[2,25]},{5:[2,26],15:[2,26],18:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],29:[2,26],30:[2,26],31:[2,26],32:[2,26],33:[2,26],35:[2,26],37:[2,26],38:[2,26],40:[2,26],49:[2,26],50:[2,26],51:[2,26],55:[2,26],56:[2,26]},{5:[2,27],15:[2,27],18:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],27:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],35:[2,27],37:[2,27],38:[2,27],40:[2,27],49:[2,27],50:[2,27],51:[2,27],55:[2,27],56:[2,27]},{5:[2,28],15:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],35:[2,28],37:[2,28],38:[2,28],40:[2,28],49:[2,28],50:[2,28],51:[2,28],55:[2,28],56:[2,28]},{15:[1,59],51:[2,66],59:58},{15:[1,60]},{7:62,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,61]},{7:64,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,63]},{5:[2,42],15:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],35:[2,42],37:[1,67],38:[2,42],40:[2,42],42:65,46:66,49:[2,42],50:[2,42],51:[2,42],55:[2,42],56:[2,42]},{5:[2,29],15:[2,29],18:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],29:[2,29],30:[2,29],31:[2,29],32:[2,29],33:[2,29],35:[2,29],37:[2,29],38:[2,29],40:[2,29],49:[2,29],50:[2,29],51:[2,29],55:[2,29],56:[2,29]},{5:[2,30],15:[2,30],18:[2,30],19:[2,30],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],35:[2,30],37:[2,30],38:[2,30],40:[2,30],49:[2,30],50:[2,30],51:[2,30],55:[2,30],56:[2,30]},{44:[1,68]},{1:[2,1]},{5:[2,2]},{7:69,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27]},{7:70,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27]},{7:71,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27]},{7:72,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27]},{7:73,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27]},{5:[2,8],15:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],29:[2,8],30:[2,8],31:[2,8],32:[2,8],33:[2,8],38:[2,8],40:[2,8],49:[2,8],50:[2,8],55:[2,8],56:[2,8]},{38:[1,74]},{7:75,12:8,13:9,14:10,15:[1,11],17:76,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27]},{5:[2,21],15:[2,21],18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],35:[2,21],37:[2,21],38:[2,21],40:[2,21],49:[2,21],50:[2,21],51:[2,21],55:[2,21],56:[2,21]},{6:78,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,47:18,48:77,49:[1,30],50:[1,27],53:16,54:17,55:[1,29],56:[1,28]},{6:78,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,47:18,48:79,49:[1,30],50:[1,27],53:16,54:17,55:[1,29],56:[1,28]},{6:78,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,47:18,48:80,49:[1,30],50:[1,27],53:16,54:17,55:[1,29],56:[1,28]},{40:[1,81]},{5:[2,37],15:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[2,37],29:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],35:[2,37],37:[2,37],38:[2,37],40:[2,37],49:[2,37],50:[2,37],51:[2,37],55:[2,37],56:[2,37]},{44:[2,44]},{44:[2,45]},{44:[2,46]},{5:[2,31],15:[2,31],18:[2,31],19:[2,31],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],27:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],35:[2,31],37:[2,31],38:[2,31],40:[2,31],49:[2,31],50:[2,31],51:[2,31],55:[2,31],56:[2,31]},{5:[2,32],15:[2,32],18:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],27:[2,32],29:[2,32],30:[2,32],31:[2,32],32:[2,32],33:[2,32],35:[2,32],37:[2,32],38:[2,32],40:[2,32],49:[2,32],50:[2,32],51:[2,32],55:[2,32],56:[2,32]},{35:[1,83],37:[1,82]},{18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],35:[2,35],37:[2,35]},{51:[1,84]},{37:[1,87],51:[2,68],61:85,62:86},{37:[1,88],57:[1,89],58:[1,90]},{7:91,12:8,13:9,14:10,15:[1,92],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27],51:[2,66],59:58},{18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],38:[2,57]},{7:93,12:8,13:9,14:10,15:[1,92],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,50:[1,27],51:[2,66],59:58},{18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],38:[2,50]},{5:[2,39],15:[2,39],18:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],29:[2,39],30:[2,39],31:[2,39],32:[2,39],33:[2,39],35:[2,39],37:[2,39],38:[2,39],40:[2,39],49:[2,39],50:[2,39],51:[2,39],55:[2,39],56:[2,39]},{5:[2,42],15:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],35:[2,42],37:[1,67],38:[2,42],40:[2,42],42:94,46:66,49:[2,42],50:[2,42],51:[2,42],55:[2,42],56:[2,42]},{15:[1,51],26:[1,52],27:[1,53],41:95,43:34},{7:97,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,45:96,50:[1,27]},{5:[2,16],15:[2,16],18:[2,16],19:[2,16],20:[1,39],21:[1,40],22:[1,41],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],35:[2,16],37:[2,16],38:[2,16],40:[2,16],49:[2,16],50:[2,16],51:[2,16],55:[2,16],56:[2,16]},{5:[2,17],15:[2,17],18:[2,17],19:[2,17],20:[1,39],21:[1,40],22:[1,41],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],35:[2,17],37:[2,17],38:[2,17],40:[2,17],49:[2,17],50:[2,17],51:[2,17],55:[2,17],56:[2,17]},{5:[2,18],15:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[2,18],22:[2,18],23:[2,18],24:[2,18],25:[2,18],26:[2,18],27:[2,18],29:[2,18],30:[2,18],31:[2,18],32:[2,18],33:[2,18],35:[2,18],37:[2,18],38:[2,18],40:[2,18],49:[2,18],50:[2,18],51:[2,18],55:[2,18],56:[2,18]},{5:[2,19],15:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],35:[2,19],37:[2,19],38:[2,19],40:[2,19],49:[2,19],50:[2,19],51:[2,19],55:[2,19],56:[2,19]},{5:[2,20],15:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],35:[2,20],37:[2,20],38:[2,20],40:[2,20],49:[2,20],50:[2,20],51:[2,20],55:[2,20],56:[2,20]},{6:78,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,47:18,48:98,49:[1,30],50:[1,27],53:16,54:17,55:[1,29],56:[1,28]},{5:[2,12],15:[2,12],18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],35:[2,12],37:[2,12],38:[2,12],40:[2,12],49:[2,12],50:[2,12],51:[2,12],55:[2,12],56:[2,12]},{5:[2,14],15:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],35:[2,14],37:[2,14],38:[2,14],40:[2,14],49:[2,14],50:[2,14],51:[2,14],55:[2,14],56:[2,14]},{40:[1,99]},{6:78,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,40:[2,52],41:31,43:34,47:18,48:100,49:[1,30],50:[1,27],53:16,54:17,55:[1,29],56:[1,28]},{40:[1,101]},{40:[1,102]},{5:[2,36],15:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],35:[2,36],37:[2,36],38:[2,36],40:[2,36],49:[2,36],50:[2,36],51:[2,36],55:[2,36],56:[2,36]},{7:57,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],34:103,36:56,38:[1,19],39:20,41:31,43:34,50:[1,27]},{5:[2,34],15:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],35:[2,34],37:[2,34],38:[2,34],40:[2,34],49:[2,34],50:[2,34],51:[2,34],55:[2,34],56:[2,34]},{60:[1,104]},{51:[2,65]},{37:[1,87],51:[2,68],61:105,62:86},{37:[2,69],51:[2,69]},{15:[1,106]},{12:107,15:[1,108],26:[1,52],27:[1,53],38:[1,19],39:20,41:31,43:34},{13:109,15:[1,110],33:[1,21]},{18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],51:[1,111]},{16:[1,44],18:[2,13],19:[2,13],20:[2,13],21:[2,13],22:[2,13],37:[1,87],44:[2,13],51:[2,13],61:85,62:86},{18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],51:[1,112]},{5:[2,41],15:[2,41],18:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],29:[2,41],30:[2,41],31:[2,41],32:[2,41],33:[2,41],35:[2,41],37:[2,41],38:[2,41],40:[2,41],49:[2,41],50:[2,41],51:[2,41],55:[2,41],56:[2,41]},{5:[2,43],15:[2,43],18:[2,43],19:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],35:[2,43],37:[2,43],38:[2,43],40:[2,43],49:[2,43],50:[2,43],51:[2,43],55:[2,43],56:[2,43]},{5:[2,40],15:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],35:[2,40],37:[2,40],38:[2,40],40:[2,40],49:[2,40],50:[2,40],51:[2,40],55:[2,40],56:[2,40]},{5:[2,47],15:[2,47],18:[1,37],19:[1,38],20:[1,39],21:[1,40],22:[1,41],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],29:[2,47],30:[2,47],31:[2,47],32:[2,47],33:[2,47],35:[2,47],37:[2,47],38:[2,47],40:[2,47],49:[2,47],50:[2,47],51:[2,47],55:[2,47],56:[2,47]},{40:[1,113]},{5:[2,54],15:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],27:[2,54],29:[2,54],30:[2,54],31:[2,54],32:[2,54],33:[2,54],38:[2,54],40:[2,54],49:[2,54],50:[2,54],55:[2,54],56:[2,54]},{40:[2,53]},{5:[2,55],15:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],27:[2,55],29:[2,55],30:[2,55],31:[2,55],32:[2,55],33:[2,55],38:[2,55],40:[2,55],49:[2,55],50:[2,55],55:[2,55],56:[2,55]},{5:[2,48],15:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],29:[2,48],30:[2,48],31:[2,48],32:[2,48],33:[2,48],38:[2,48],40:[2,48],49:[2,48],50:[2,48],52:[2,48],55:[2,48],56:[2,48]},{5:[2,33],15:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],27:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],35:[2,33],37:[2,33],38:[2,33],40:[2,33],49:[2,33],50:[2,33],51:[2,33],55:[2,33],56:[2,33]},{38:[1,114]},{51:[2,67]},{57:[1,115]},{38:[2,60]},{38:[2,61],44:[2,44]},{38:[2,62]},{38:[2,63]},{38:[2,56]},{38:[2,49]},{5:[2,51],15:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],33:[2,51],38:[2,51],40:[2,51],49:[2,51],50:[2,51],55:[2,51],56:[2,51]},{6:78,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:[1,11],17:12,23:[1,13],24:[1,14],25:[1,15],26:[1,22],27:[1,23],28:24,29:[1,25],30:[1,26],31:[1,32],32:[1,33],33:[1,21],38:[1,19],39:20,41:31,43:34,47:18,48:116,49:[1,30],50:[1,27],53:16,54:17,55:[1,29],56:[1,28]},{12:117,15:[1,118],26:[1,52],27:[1,53],38:[1,19],39:20,41:31,43:34},{40:[1,119]},{38:[2,58]},{38:[2,59],44:[2,44]},{5:[2,64],15:[2,64],18:[2,64],19:[2,64],20:[2,64],21:[2,64],22:[2,64],23:[2,64],24:[2,64],25:[2,64],26:[2,64],27:[2,64],29:[2,64],30:[2,64],31:[2,64],32:[2,64],33:[2,64],35:[2,64],37:[2,64],38:[2,64],40:[2,64],49:[2,64],50:[2,64],51:[2,64],55:[2,64],56:[2,64]}],
defaultActions: {35:[2,1],36:[2,2],51:[2,44],52:[2,45],53:[2,46],85:[2,65],100:[2,53],105:[2,67],107:[2,60],109:[2,62],110:[2,63],111:[2,56],112:[2,49],117:[2,58]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){return this.conditionStack.length},
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 60
break;
case 1:return 26
break;
case 2:return 27
break;
case 3:return 27
break;
case 4:return 22
break;
case 5:return 20
break;
case 6:return 21
break;
case 7:return 19
break;
case 8:return 18
break;
case 9:return '^'
break;
case 10:return '!'
break;
case 11:return 'MOD'
break;
case 12:return 16
break;
case 13:return 'PI'
break;
case 14:return 5
break;
case 15:return '&&'
break;
case 16:return '&&'
break;
case 17:return '||'
break;
case 18:return '||'
break;
case 19:return '==='
break;
case 20:return '==='
break;
case 21:return '!=='
break;
case 22:return '!=='
break;
case 23:return '!'
break;
case 24:return 31
break;
case 25:return 32
break;
case 26:return 31
break;
case 27:return 32
break;
case 28:return 38
break;
case 29:return 40
break;
case 30:return 33
break;
case 31:return 35
break;
case 32:return 50
break;
case 33:return 51
break;
case 34:return 37
break;
case 35:return 44
break;
case 36:return 'SEMICOLON'
break;
case 37:/* skip whitespace */
break;
case 38:return 'this'
break;
case 39:return 58
break;
case 40:return 57
break;
case 41:return 23
break;
case 42:return 24
break;
case 43:return 25
break;
case 44:return 49
break;
case 45:return 52
break;
case 46:return 56
break;
case 47:return 55
break;
case 48:return 31
break;
case 49:return 32
break;
case 50:return 30
break;
case 51:return 29
break;
case 52:return 'then'
break;
case 53:return 'unless'
break;
case 54:return 'until'
break;
case 55:return 15 
break;
}
},
rules: [/^(?:->)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:".*")/,/^(?:'.*')/,/^(?:\*{2})/,/^(?:\*{1})/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:=)/,/^(?:PI\b)/,/^(?:$)/,/^(?:and\b)/,/^(?:&&)/,/^(?:or\b)/,/^(?:\|\|)/,/^(?:is\b)/,/^(?:==)/,/^(?:isnt\b)/,/^(?:!=)/,/^(?:not\b)/,/^(?:yes\b)/,/^(?:no\b)/,/^(?:on\b)/,/^(?:off\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:[\s\n]+)/,/^(?:this\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:then\b)/,/^(?:unless\b)/,/^(?:until\b)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}